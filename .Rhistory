ggplot(aes(rowid, x)) +
geom_line()
AR[9] # the ts not the tibble
AR[10]
AR_11 <- AR_intercept + AR_param_1 * AR[10] + AR_param_2 * AR[9]
AR_12 <- AR_intercept + AR_param_1 * AR_11 + AR_param_2 * AR[10]
AR_tb <- cbind(AR_tb, cat = rep("Past",10))
AR_tb <- AR_tb %>% add_row(rowid = 11, x = AR_11, cat = "projected")
AR_tb <- AR_tb %>% add_row(rowid = 12, x = AR_12, cat = "projected")
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_point()
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat), size =3) +
geom_point()
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat), size = 6) +
geom_point()
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_point(size = 4)
set.seed(13)
AR_param_1 = 0.5
AR_param_2 = 0.3
AR_intercept = 1.2
AR_n <- 10
theme_set(theme_bw())
# arima.sim model c(p, d, q)
# p = AR order
# d = difference
# q = MA order
# Generate an AR(2) with parameters, AR_param_1 and AR_param_2
# Not this: AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n) + AR_intercept
AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n, mean = AR_intercept)
AR <- round(AR, digits = 3)
AR_tb <- AR %>% as_tibble() %>% rowid_to_column()
AR_tb %>%
ggplot(aes(rowid, x)) +
geom_line()
AR[9] # the ts not the tibble
AR[10]
AR_11 <- AR_intercept + AR_param_1 * AR[10] + AR_param_2 * AR[9]
AR_12 <- AR_intercept + AR_param_1 * AR_11 + AR_param_2 * AR[10]
AR_tb <- cbind(AR_tb, cat = rep("Past",10))
AR_tb <- AR_tb %>% add_row(rowid = 11, x = AR_11, cat = "projected")
AR_tb <- AR_tb %>% add_row(rowid = 12, x = AR_12, cat = "projected")
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_point(size = 4)
set.seed(13)
AR_param_1 = 0.6
AR_param_2 = 0.2
AR_intercept = 0.7
AR_n <- 10
theme_set(theme_bw())
# arima.sim model c(p, d, q)
# p = AR order
# d = difference
# q = MA order
# Generate an AR(2) with parameters, AR_param_1 and AR_param_2
# Not this: AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n) + AR_intercept
AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n, mean = AR_intercept)
AR <- round(AR, digits = 3)
AR_tb <- AR %>% as_tibble() %>% rowid_to_column()
AR_tb %>%
ggplot(aes(rowid, x)) +
geom_line()
AR[9] # the ts not the tibble
AR[10]
AR_11 <- AR_intercept + AR_param_1 * AR[10] + AR_param_2 * AR[9]
AR_12 <- AR_intercept + AR_param_1 * AR_11 + AR_param_2 * AR[10]
AR_tb <- cbind(AR_tb, cat = rep("Past",10))
AR_tb <- AR_tb %>% add_row(rowid = 11, x = AR_11, cat = "projected")
AR_tb <- AR_tb %>% add_row(rowid = 12, x = AR_12, cat = "projected")
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_point(size = 4)
set.seed(15)
AR_param_1 = 0.6
AR_param_2 = 0.2
AR_intercept = 0.7
AR_n <- 10
theme_set(theme_bw())
# arima.sim model c(p, d, q)
# p = AR order
# d = difference
# q = MA order
# Generate an AR(2) with parameters, AR_param_1 and AR_param_2
# Not this: AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n) + AR_intercept
AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n, mean = AR_intercept)
AR <- round(AR, digits = 3)
AR_tb <- AR %>% as_tibble() %>% rowid_to_column()
AR_tb %>%
ggplot(aes(rowid, x)) +
geom_line()
AR[9] # the ts not the tibble
AR[10]
AR_11 <- AR_intercept + AR_param_1 * AR[10] + AR_param_2 * AR[9]
AR_12 <- AR_intercept + AR_param_1 * AR_11 + AR_param_2 * AR[10]
AR_tb <- cbind(AR_tb, cat = rep("Past",10))
AR_tb <- AR_tb %>% add_row(rowid = 11, x = AR_11, cat = "projected")
AR_tb <- AR_tb %>% add_row(rowid = 12, x = AR_12, cat = "projected")
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_point(size = 4)
set.seed(16)
AR_param_1 = 0.6
AR_param_2 = 0.2
AR_intercept = 0.7
AR_n <- 10
theme_set(theme_bw())
# arima.sim model c(p, d, q)
# p = AR order
# d = difference
# q = MA order
# Generate an AR(2) with parameters, AR_param_1 and AR_param_2
# Not this: AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n) + AR_intercept
AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n, mean = AR_intercept)
AR <- round(AR, digits = 3)
AR_tb <- AR %>% as_tibble() %>% rowid_to_column()
AR_tb %>%
ggplot(aes(rowid, x)) +
geom_line()
AR[9] # the ts not the tibble
AR[10]
AR_11 <- AR_intercept + AR_param_1 * AR[10] + AR_param_2 * AR[9]
AR_12 <- AR_intercept + AR_param_1 * AR_11 + AR_param_2 * AR[10]
AR_tb <- cbind(AR_tb, cat = rep("Past",10))
AR_tb <- AR_tb %>% add_row(rowid = 11, x = AR_11, cat = "projected")
AR_tb <- AR_tb %>% add_row(rowid = 12, x = AR_12, cat = "projected")
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_point(size = 4)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
xlim(0,13)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
xlim(1,12)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
xlim(0.5,12.5)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
xlim(0, 13)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
scale_x_discrete(breaks = 1)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
scale_x_discrete(limits = c(0,13), breaks = 1)
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(0, 13, 1))
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(0, 13, 2))
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(0, 13, 1))
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(0, 13, 1.5))
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(1, 11, 1))
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(1, 12, 1))
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(1, 12, 1), minor_breaks = NULL)
View(AR_tb)
library(tidyverse)
set.seed(16)
AR_param_1 = 0.6
AR_param_2 = 0.2
AR_intercept = 0.7
AR_n <- 10
theme_set(theme_bw())
# arima.sim model c(p, d, q)
# p = AR order
# d = difference
# q = MA order
# Generate an AR(2) with parameters, AR_param_1 and AR_param_2
# Not this: AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n) + AR_intercept
AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n, mean = AR_intercept)
AR <- round(AR, digits = 3)
AR_tb <- AR %>% as_tibble() %>% rowid_to_column()
AR_tb %>%
ggplot(aes(rowid, x)) +
geom_line()
AR[9] # the ts not the tibble
AR[10]
AR_11 <- AR_intercept + AR_param_1 * AR[10] + AR_param_2 * AR[9]
AR_12 <- AR_intercept + AR_param_1 * AR_11 + AR_param_2 * AR[10]
AR_tb <- cbind(AR_tb, cat = rep("Past",10))
AR_tb <- AR_tb %>% add_row(rowid = 11, x = AR_11, cat = "projected")
AR_tb <- AR_tb %>% add_row(rowid = 12, x = AR_12, cat = "projected")
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(1, 12, 1), minor_breaks = NULL)
?forecast
set.seed(22)
AR2_param_1 = 0.42
AR2_param_2 = 0.15
AR2_intercept = 0.53
AR2_n <- 10
theme_set(theme_bw())
# arima.sim model c(p, d, q)
# p = AR order
# d = difference
# q = MA order
# Generate an AR(2) with parameters, AR_param_1 and AR_param_2
# Not this: AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n) + AR_intercept
AR2 <- arima.sim(model=list(order=c(2,0,0), ar = c(AR2_param_1, AR2_param_2)), n = AR2_n, mean = AR2_intercept)
AR2 <- round(AR2, digits = 3)
AR2_tb <- AR2 %>% as_tibble() %>% rowid_to_column()
View(AR2_tb)
AR2_tb %>%
ggplot(aes(rowid, x)) +
geom_line()
View(AR2_tb)
AR2_11 <- AR2_intercept + AR2_param_1 * AR2[10] + AR2_param_2 * AR2[9]
AR2_12 <- AR2_intercept + AR2_param_1 * AR2_11 + AR2_param_2 * AR2[10]
AR2_13 <- AR2_intercept + AR2_param_1 * AR2_12 + AR2_param_2 * AR2_11
AR2_14 <- AR2_intercept + AR2_param_1 * AR2_13 + AR2_param_2 * AR2_12
x[0] = AR2_14
x = vector(30)
x = vector(length = 30)
?vector
x = vector(mode= n"numeric", length = 30)
x = vector(mode= "numeric", length = 30)
x[1] = AR2_13
x[2] = AR2_14
for (i in 3:30) {
x[i] <- AR2_intercept + AR2_param_1 * x[i-1] + AR2_param_2 * x[i=2]
}
x
for (i in 3:30) {
x[i] <- AR2_intercept + AR2_param_1 * x[i-1] + AR2_param_2 * x[i-2]
}
x = vector(mode= "numeric", length = 30)
x[1] = AR2_13
x[2] = AR2_14
for (i in 3:30) {
x[i] <- AR2_intercept + AR2_param_1 * x[i-1] + AR2_param_2 * x[i-2]
}
x
plot(x)
library(blogdown)
.libPaths
.libPaths()
.libPaths()
myPaths <- .libPaths()
myPaths
myPaths[1]
myPaths[2]
myPaths <- c("D:/library", .libPaths())
myPaths
.libPaths()
.libPaths()
?libPaths
?.libPaths
.libPaths(myPaths)
?.libPaths
.libPaths()
myPaths
.libPaths()
library(blogdown)
blogdown:::serve_site()
blogdown:::new_post_addin()
new_post(title = "test in 2021", ext = '.Rmd', subdir = "post")
c21 <- c(0.45, -1.4, 1) # GARP's Chapter 10 appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
c21_roots <- polyroot(c21) # roots are 0.9 and 0.5 so this is stationary
c21_real <- Re(c21_roots)
c21_img <- Im(c21_roots)
sqrt(c21_real^2 + c21_img^2) # magnitude 0.5 and 0.9; inside the unit circle!
sqrt(c21_real^2 + c21_img^2) # magnitude 0.5 and 0.9; inside the unit circle!
c21_real^2
AR2_param_1 <- 0.9
AR2_param_2 <- 0.4
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2)
AR2_magnitutde # returns 0.3262 and 1.226 such that 1.226 is outside unit circle
# AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
AR2_param_1 <- 1.8
AR2_param_2 <- -0.9
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_param_1 <- 1.8
AR2_param_2 <- -0.9
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2)
AR2_magnitutde # returns 0.3262 and 1.226 such that 1.226 is outside unit circle
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
ts.plot(AR2)
AR2_param_1 <- 1.8
AR2_param_2 <- -0.9
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2)
AR2_magnitutde # returns 0.3262 and 1.226 such that 1.226 is outside unit circle
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
ts.plot(AR2)
AR2_param_1 <- 1.8
AR2_param_2 <- -0.8
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2)
AR2_magnitutde # returns 0.3262 and 1.226 such that 1.226 is outside unit circle
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
AR2_param_1 <- 1.8
AR2_param_2 <- -0.8
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2)
AR2_magnitutde # returns 0.3262 and 1.226 such that 1.226 is outside unit circle
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
library(tidyverse)
set.seed(13)
AR_param_1 = 0.5
AR_param_2 = 0.3
AR_intercept = 0.4
AR_n <- 10
AR_LR <- AR_intercept/(1- AR_param_1 - AR_param_2)
theme_set(theme_bw())
# arima.sim model c(p, d, q)
# p = AR order
# d = difference
# q = MA order
# Generate an AR(2) with parameters, AR_param_1 and AR_param_2
# Not this: AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n) + AR_intercept
AR <- arima.sim(model=list(order=c(2,0,0), ar = c(AR_param_1, AR_param_2)), n = AR_n, mean = AR_intercept)
AR <- round(AR, digits = 3)
AR_tb <- AR %>% as_tibble() %>% rowid_to_column()
# reduced to 80% on copy/paste
AR_tb %>%
ggplot(aes(rowid, x)) +
ylab("Growth (%)") +
theme(
text = element_text(family = "Calibri"),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 13, face = "bold", margin = margin(0,10,0,0)),
axis.text = element_text(size = 13, face = "bold")
) +
geom_line(size = 1) +
geom_point(size = 4) +
scale_x_continuous(breaks = seq(1, 10, 1), minor_breaks = NULL) +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
geom_text(aes(label = x), size = 4, color = "darkgreen", fontface = "bold", nudge_y = 0.2, nudge_x = .62)
AR[9] # the ts not the tibble
AR[10]
AR_11 <- AR_intercept + AR_param_1 * AR[10] + AR_param_2 * AR[9]
AR_12 <- AR_intercept + AR_param_1 * AR_11 + AR_param_2 * AR[10]
AR_tb <- cbind(AR_tb, cat = rep("Past",10))
AR_tb <- AR_tb %>% add_row(rowid = 11, x = AR_11, cat = "projected")
AR_tb <- AR_tb %>% add_row(rowid = 12, x = AR_12, cat = "projected")
AR_tb %>%
ggplot(aes(rowid, x, group = cat, color = cat)) +
geom_line() +
geom_point(size = 4) +
# xlim(0, 13)
# scale_x_discrete(limits = c(0,13), breaks = 1)
scale_x_continuous(breaks = seq(1, 12, 1), minor_breaks = NULL)
AR_11
AR_12
?arima.sim
WN <- arima.sim(model = list(order = c(0,0,0)), n = 100)
plot.ts(WN)
WN <- arima.sim(model = list(order = c(0,0,0)), n = 100)
plot.ts(WN)
?seq
time <- seq(from = 1, to = 100)
alpha = 2.5
beta = 0.5
Y <- alpha + beta * time + WN
plot.ts(Y)
table <- data.frame(time, WN, Y)
View(table)
WN
?diff
Y_diff <- diff(Y)
plot.ts(Y_diff)
Box.test(Y_diff, type = "Ljung")
Box.test(WN, type = "Ljung")
set.seed(24)
WN <- arima.sim(model = list(order = c(0,0,0)), n = 100)
plot.ts(WN)
alpha = 2.5
beta = 0.5
time <- seq(from = 1, to = 100)
Y <- alpha + beta * time + WN
plot.ts(Y)
table <- data.frame(time, WN, Y)
Y_diff <- diff(Y)
plot.ts(Y_diff)
Box.test(Y_diff, type = "Ljung")
Box.test(WN, type = "Ljung")
set.seed(123)
AR2_1_coef <- c(1.8, 08)
?arima.sim
arima.sim(n = 100, model = list(order = c(p = 2, d = 0, q = 0), ar = AR2_1_coef)
arima.sim(n = 100,
arima.sim(n = 100,
model = list(
order = c(2, 0, 0),
ar = AR2_1_coef))
sim_1 <- arima.sim(n = 100,
model = list(order = c(2, 0, 0),
ar = c(1.8, -0.9))
)
plot.ts(sim_1)
set.seed(123)
sim_1 <- arima.sim(n = 100,
model = list(order = c(2, 0, 0),
ar = c(1.8, -0.9))
)
plot.ts(sim_1)
sim_2 <- arima.sim(n = 100,
model = list(order = c(2, 0, 0),
ar = c(1.8, -0.8))
)
set.seed(24)
WN <- arima.sim(model = list(order = c(0,0,0)), n = 100)
plot.ts(WN)
alpha = 2.5
beta = 0.5
time <- seq(from = 1, to = 100)
Y <- alpha + beta * time + WN
plot.ts(Y)
table <- data.frame(time, WN, Y)
Y_diff <- diff(Y)
plot.ts(Y_diff)
Box.test(Y_diff, type = "Ljung")
Box.test(WN, type = "Ljung")
