# library(ggfortify)
# library(forecast)
library(ggthemes)
# library(cowplot)
set.seed(59)
# Simulate a WN model with list(order = c(0, 0, 0))
# dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100)
dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_wn_tbl <- bind_cols(dat_wn) %>% rowid_to_column() %>% rename(value_y = ...1 )
process_color = "#1E058F"
p1 <- dat_wn_tbl %>% ggplot(aes(x = rowid, y = value_y)) +
geom_line(size= 1, color = process_color) +
ylab("Y Value") +
xlab("Process (100 days)") +
theme_bw() +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold", color = process_color),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
#p2 <- ggAcf(dat_wn)
p2 <- ggAcf(dat_wn) +
xlab("Lags") +
theme_bw() +
geom_segment(size = 3) +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
# grid.arrange(p1, p2)
p1/p2
s5 <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_rw <- arima.sim(model = list(order = c(0,1,0)), n = 100)
dat_rw_tbl <- bind_cols(dat_rw) %>% rowid_to_column() %>% rename(value_y = ...1 )
dat_rw_tbl %>% ggplot(aes(x = rowid, y = value_y)) + geom_line()
# Simulate a WN model with list(order = c(0, 0, 0))
# white_noise <- arima.sim(model = list(order = c(0,0,0)), n = 100)
# white_noise_1_tb  <- as_tibble(white_noise) %>% rowid_to_column()
# p1 <- ggplot(white_noise_1_tb, aes(x = rowid, y = x)) + geom_line()
# p2 <- ggAcf(white_noise)
# grid.arrange(p1, p2)
library(tidyverse)
library(patchwork)
library(extrafont)
# library(ggfortify)
# library(forecast)
library(ggthemes)
# library(cowplot)
set.seed(58)
# Simulate a WN model with list(order = c(0, 0, 0))
# dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100)
dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_wn_tbl <- bind_cols(dat_wn) %>% rowid_to_column() %>% rename(value_y = ...1 )
process_color = "#1E058F"
p1 <- dat_wn_tbl %>% ggplot(aes(x = rowid, y = value_y)) +
geom_line(size= 1, color = process_color) +
ylab("Y Value") +
xlab("Process (100 days)") +
theme_bw() +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold", color = process_color),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
#p2 <- ggAcf(dat_wn)
p2 <- ggAcf(dat_wn) +
xlab("Lags") +
theme_bw() +
geom_segment(size = 3) +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
# grid.arrange(p1, p2)
p1/p2
s5 <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_rw <- arima.sim(model = list(order = c(0,1,0)), n = 100)
dat_rw_tbl <- bind_cols(dat_rw) %>% rowid_to_column() %>% rename(value_y = ...1 )
dat_rw_tbl %>% ggplot(aes(x = rowid, y = value_y)) + geom_line()
# Simulate a WN model with list(order = c(0, 0, 0))
# white_noise <- arima.sim(model = list(order = c(0,0,0)), n = 100)
# white_noise_1_tb  <- as_tibble(white_noise) %>% rowid_to_column()
# p1 <- ggplot(white_noise_1_tb, aes(x = rowid, y = x)) + geom_line()
# p2 <- ggAcf(white_noise)
# grid.arrange(p1, p2)
library(tidyverse)
library(patchwork)
library(extrafont)
# library(ggfortify)
# library(forecast)
library(ggthemes)
# library(cowplot)
set.seed(58)
# Simulate a WN model with list(order = c(0, 0, 0))
# dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100)
dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_wn_tbl <- bind_cols(dat_wn) %>% rowid_to_column() %>% rename(value_y = ...1 )
process_color = "#1E058F"
p1 <- dat_wn_tbl %>% ggplot(aes(x = rowid, y = value_y)) +
geom_line(size= 1, color = process_color) +
ylab("Y Value") +
xlab("Process (100 days)") +
theme_bw() +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold", color = process_color),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
#p2 <- ggAcf(dat_wn)
p2 <- ggAcf(dat_wn) +
xlab("Lags") +
theme_bw() +
geom_segment(size = 3) +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
# grid.arrange(p1, p2)
p1/p2
s5 <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_rw <- arima.sim(model = list(order = c(0,1,0)), n = 100)
dat_rw_tbl <- bind_cols(dat_rw) %>% rowid_to_column() %>% rename(value_y = ...1 )
dat_rw_tbl %>% ggplot(aes(x = rowid, y = value_y)) + geom_line()
# Simulate a WN model with list(order = c(0, 0, 0))
# white_noise <- arima.sim(model = list(order = c(0,0,0)), n = 100)
# white_noise_1_tb  <- as_tibble(white_noise) %>% rowid_to_column()
# p1 <- ggplot(white_noise_1_tb, aes(x = rowid, y = x)) + geom_line()
# p2 <- ggAcf(white_noise)
# grid.arrange(p1, p2)
library(tidyverse)
library(patchwork)
library(extrafont)
# library(ggfortify)
# library(forecast)
library(ggthemes)
# library(cowplot)
set.seed(58)
# Simulate a WN model with list(order = c(0, 0, 0))
# dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100)
dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_wn_tbl <- bind_cols(dat_wn) %>% rowid_to_column() %>% rename(value_y = ...1 )
process_color = "#7E4F1B"
p1 <- dat_wn_tbl %>% ggplot(aes(x = rowid, y = value_y)) +
geom_line(size= 1, color = process_color) +
ylab("Y Value") +
xlab("Process (100 days)") +
theme_bw() +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold", color = process_color),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
#p2 <- ggAcf(dat_wn)
p2 <- ggAcf(dat_wn) +
xlab("Lags") +
theme_bw() +
geom_segment(size = 3) +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
# grid.arrange(p1, p2)
p1/p2
s5 <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_rw <- arima.sim(model = list(order = c(0,1,0)), n = 100)
dat_rw_tbl <- bind_cols(dat_rw) %>% rowid_to_column() %>% rename(value_y = ...1 )
dat_rw_tbl %>% ggplot(aes(x = rowid, y = value_y)) + geom_line()
# Simulate a WN model with list(order = c(0, 0, 0))
# white_noise <- arima.sim(model = list(order = c(0,0,0)), n = 100)
# white_noise_1_tb  <- as_tibble(white_noise) %>% rowid_to_column()
# p1 <- ggplot(white_noise_1_tb, aes(x = rowid, y = x)) + geom_line()
# p2 <- ggAcf(white_noise)
# grid.arrange(p1, p2)
library(tidyverse)
library(patchwork)
library(extrafont)
# library(ggfortify)
# library(forecast)
library(ggthemes)
# library(cowplot)
set.seed(58)
# Simulate a WN model with list(order = c(0, 0, 0))
# dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100)
dat_wn <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_wn_tbl <- bind_cols(dat_wn) %>% rowid_to_column() %>% rename(value_y = ...1 )
process_color = "#266935"
p1 <- dat_wn_tbl %>% ggplot(aes(x = rowid, y = value_y)) +
geom_line(size= 1, color = process_color) +
ylab("Y Value") +
xlab("Process (100 days)") +
theme_bw() +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold", color = process_color),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
#p2 <- ggAcf(dat_wn)
p2 <- ggAcf(dat_wn) +
xlab("Lags") +
theme_bw() +
geom_segment(size = 3) +
theme(
text = element_text(family = "Calibri"),
plot.title = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face= "bold"),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="grey"),
panel.border = element_blank()
)
# grid.arrange(p1, p2)
p1/p2
s5 <- arima.sim(model = list(order = c(0,0,0)), n = 100,
rand.gen = function(n, ...) rpois(n, lambda = 10))
dat_rw <- arima.sim(model = list(order = c(0,1,0)), n = 100)
dat_rw_tbl <- bind_cols(dat_rw) %>% rowid_to_column() %>% rename(value_y = ...1 )
dat_rw_tbl %>% ggplot(aes(x = rowid, y = value_y)) + geom_line()
MA_mean = 2
MA_weight = 0.5
# Generate and plot an MA(1) with parameter .9
# MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = MA_mean,
#                rand.gen = rnorm, sd = 40)
MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = MA_mean)
MA_mean = .7
MA_weight = 0.5
# Generate and plot an MA(1) with parameter .9
# MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = MA_mean,
#                rand.gen = rnorm, sd = 40)
MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = MA_mean)
MA_weight = 1.5
# Generate and plot an MA(1) with parameter .9
# MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = MA_mean,
#                rand.gen = rnorm, sd = 40)
MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = MA_mean)
AR_param = 0.6
AR_intercept = 3
# Generate and plot an AR(2) with parameters 1.5 and -.75
AR <- arima.sim(model=list(order=c(1,0,0), ar = AR_param), n = 200, mean = AR_intercept)
AR_param = 1.2
# Generate and plot an AR(2) with parameters 1.5 and -.75
AR <- arima.sim(model=list(order=c(1,0,0), ar = AR_param), n = 200, mean = AR_intercept)
MA_weight = 1.5
# Generate and plot an MA(1) with parameter .9
# MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = MA_mean,
#                rand.gen = rnorm, sd = 40)
MA <- arima.sim(model=list(order = c(0,0,1), ma = MA_weight), n = 200, mean = 0)
AR_param = 1.2
# Generate and plot an AR(2) with parameters 1.5 and -.75
AR <- arima.sim(model=list(order=c(1,0,0), ar = AR_param), n = 200, mean = 0)
AR_param_11 = 0.5
AR_param_12 = 1.2
# Generate and plot an AR(2) with parameters 1.5 and -.75
AR_1 <- arima.sim(model=list(order=c(1,0,0), ar = AR_param), n = 200, mean = 0)
AR2_param_11 = 0.5
AR2_param_12 = 1.2
# Generate and plot an AR(2) with parameters 1.5 and -.75
AR2_1 <- arima.sim(model=list(order=c(1,0,0), ar = c(AR2_param_11, AR2_param_12), n = 200, mean = 0)
?polyroot
polyroot(c(1, -1.3, .4))
AR2_params_1 = c(0.5, 1.2)
# Generate and plot an AR(2) with parameters 1.5 and -.75
AR2_1 <- arima.sim(model=list(order=c(1,0,0), ar = AR2_params_1, n = 200, mean = 0)
AR2_params_1 = c(0.5, 1.2)
AR2_params_2 = c(-0.3, 0.9)
# AR(2) with parameters
AR2_2 <- arima.sim(model=list(order=c(1,0,0), ar = AR2_params_2), n = 200, mean = 0)
AR2_params_1 = c(1.4, -0.45) # GARP's Chapter 10 Appendix Example
# AR(2) with parameters
AR2_1 <- arima.sim(model=list(order=c(1,0,0), ar = AR2_params_1, n = 200, mean = 0)
AR2_params_1 = c(1.4, -0.45) # GARP's Chapter 10 Appendix Example
# AR(2) with parameters
AR2_1 <- arima.sim(model=list(order=c(1,0,0), ar = AR2_params_1, n = 200, mean = 0)
AR2_params_1 = c(1.4, -0.45) # GARP's Chapter 10 Appendix Example
AR2_params_1 = c(1.4, -0.45) # GARP's Chapter 10 Appendix Example
# AR(2) with parameters
AR2_1 <- arima.sim(model=list(order=c(1,0,0), ar = AR2_params_1, n = 200, mean = 0))
# AR(2) with parameters
AR2_1 <- arima.sim(model=list(order=c(1,0,0), ar = AR2_params_1), n = 200, mean = 0))
AR2_1 <- arima.sim(model=list(ar=AR2_params_1), n=100)
?arima.sim
# AR(2) with parameters
AR2_1 <- arima.sim(model=list(order=c(2,0,0), ar = AR2_params_1), n = 200, mean = 0))
# AR(2) with parameters
AR2_1 <- arima.sim(model=list(order=c(2,0,0), ar = AR2_params_1, n = 200, mean = 0))
# AR(2) with parameters
AR2_1 <- arima.sim(model=list(order=c(2,0,0)), ar = AR2_params_1, n = 200, mean = 0))
# AR(2) with parameters
AR2_1 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params_1), n = 200, mean = 0)
AR2_params_1 = c(1.4, -0.45) # GARP's Chapter 10 Appendix Example
# AR(2) with parameters
AR2_1 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params_1), n = 200, mean = 0)
AR2_1 <- arima.sim(model = list( ar = AR2_params_1), n=100)
polyroot(AR2_params_1)
c1 <- c(-1, 0.21)
polyroot(c1)
c1 <- c(0.45, 1.4)
polyroot(c1)
c1 <- c(0.45, -1.4)
polyroot(c1)
c1 <- c(-3, 2)
polyroot(c1)
c1 <- c(5, -4, 3)
polyroot(c1)
c21 <- c(0.45, -1.4, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
polyroot(c21) # roots are 0.9 and 0.5 so this is stationary
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
roots <- polyroot(c21) # roots are 0.9 and 0.5 so this is stationary
img(roots)
Im(roots)
c_test <- c(5, -4, 3)
polyroot(c_test)
c21 <- c(0.45, -1.4, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
c21_roots <- polyroot(c21) # roots are 0.9 and 0.5 so this is stationary
c21_real <- Re(c21_roots)
c21_img <- Im(c21_roots)
sqrt(c21_real^2 + c21_img^2)
AR2_params <- c(1.4, -0.45)
AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100)
ts.plot(AR2_GARP)
ts.plot(AR2)
AR2_param_1 <- 1.4
AR2_param_2 <- -0.45
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
# AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
ts.plot(AR2)
AR2_param_1 <- 1.6
AR2_param_2 <- 0.9
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
# AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde
AR2_param_1 <- 1.3
AR2_param_2 <- 0.9
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde
AR2_param_1 <- 0.6
AR2_param_2 <- 0.9
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde
# AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
AR2_param_1 <- 0.6
AR2_param_2 <- 0.4
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde
# AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
AR2_param_1 <- 0.5
AR2_param_2 <- 0.4
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde
# AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
# try another AR(2)
AR2_param_1 <- 0.9
AR2_param_2 <- 0.4
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde
# AR2 <- arima.sim(model = list( order = c(2,0,0), ar = AR2_params), n = 200, mean = 0)
AR2 <- arima.sim(model = list( ar = AR2_params), n=100) # simpler version
AR2_param_1 <- 0.9
AR2_param_2 <- 0.4
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde
c21 <- c(0.45, -1.4, 1) # GARP's Chapter 10 appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
c21_roots <- polyroot(c21) # roots are 0.9 and 0.5 so this is stationary
c21_real <- Re(c21_roots)
c21_img <- Im(c21_roots)
sqrt(c21_real^2 + c21_img^2) # magnitude 0.5 and 0.9; inside the unit circle!
AR2_param_1 <- 0.9
AR2_param_2 <- 0.4
AR2_params <- c(AR2_param_1, AR2_param_2)
AR2_char <- c(-AR2_param_2, -AR2_param_1, 1) # GARP's appendix example
# Y(t) = 1.4*Y(t-1) - 0.45*Y(t-2) + e(t)
AR2_roots <- polyroot(AR2_char) # roots are 0.9 and 0.5 so this is stationary
AR2_real <- Re(AR2_roots)
AR2_img <- Im(AR2_roots)
AR2_magnitutde <- sqrt(AR2_real^2 + AR2_img^2) # magnitude 0.5 and 0.9
AR2_magnitutde # returns 0.3262 and 1.226 such that 1.226 is outside unit circle
